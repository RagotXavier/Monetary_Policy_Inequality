#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Replicating package
\emph on
: Should monetary policy care about redistribution? Optimal monetary and
 fiscal policy with heterogeneous agents.
 
\end_layout

\begin_layout Author
François Le Grand, Alaïs Martin-Baillon, Xavier Ragot 
\end_layout

\begin_layout Standard
This set of files replicates the graphs and data of
\emph on
 Should monetary policy care about redistribution? Optimal monetary and
 fiscal policy with heterogeneous agents.
 
\emph default
Be careful of not mixing up these files with other replicating files and
 they should be located in an independent folder.
 Requires Matlab or Octave / Julia / Dynare.
 Tested on Matlab 2018b, Dynare 5.4 and Julia release v1.10.0.
 
\end_layout

\begin_layout Enumerate
All the .ipynb files are Julia (https://julialang.org/) notebook.
 
\end_layout

\begin_layout Enumerate
All the .m files can be runned in Matlab or Octave (https://octave.org/).
 Most require Dynare (https://www.dynare.org/).
 
\end_layout

\begin_layout Section
Quantitative assessment of the sticky-price model.
\end_layout

\begin_layout Subsection
How to run?
\end_layout

\begin_layout Standard
In this order:
\end_layout

\begin_layout Enumerate
Open `Sticky_Prices/steady_state/Main_SP.ipynb' and execute all cells.
 
\end_layout

\begin_layout Enumerate
Run `Sticky_Prices/dynamics/main_SP.m'.
\end_layout

\begin_layout Enumerate
Run `Sticky_Prices/dynamics/main_SP.m'.
 
\series bold
Comment the line 3 
\begin_inset Quotes eld
\end_inset

calib = 'baseline' 
\begin_inset Quotes eld
\end_inset

 and uncomment the line 4 
\begin_inset Quotes eld
\end_inset

calib = refined
\begin_inset Quotes erd
\end_inset


\series default
.
\end_layout

\begin_layout Enumerate
Run `Sticky_Prices/dynamics/main_taylor_SP.m'.
\end_layout

\begin_layout Enumerate
Run `Sticky_Prices/dynamics/unequal.m'.
\end_layout

\begin_layout Standard
Output: 
\end_layout

\begin_layout Enumerate
Figure 1: Run `Sticky_Prices/dynamics/Do_IRFs_SP_baseline.m'.
\end_layout

\begin_layout Enumerate
Tables 7/8: Run `Sticky_Prices/steady_state/Tables_SP.ipynb'.
\end_layout

\begin_layout Enumerate
Figure 7: Run `Sticky_Prices/dynamics/Do_IRFs_SP_unequal.m'.
\end_layout

\begin_layout Subsection
The details
\end_layout

\begin_layout Itemize
The `Julia` files takes care of computing the steady state, while the .m
 file simulates the model in the presence of aggregate shocks.
 
\end_layout

\begin_layout Standard
The output of the `Julia' files is: 
\end_layout

\begin_layout Enumerate
a file `todynare_SP_baseline.mat'
\end_layout

\begin_layout Enumerate
a file `todynare_SP_refined.mat' 
\end_layout

\begin_layout Enumerate
a file `To_IRFs_SP_unequal.mat' 
\end_layout

\begin_layout Standard
Those files will be used by main.m, main_taylor.m, unequal.m
\end_layout

\begin_layout Itemize
The outputs of the `Octave' / `Matlab' files are: 
\end_layout

\begin_deeper
\begin_layout Itemize
`To_IRFs_SP_baseline.mat' 
\end_layout

\begin_layout Itemize
`To_IRFs_SP_taylor.mat'
\end_layout

\begin_layout Itemize
`To_IRFs_SP_unequal.mat'
\end_layout

\end_deeper
\begin_layout Standard
Then:
\end_layout

\begin_layout Itemize
`Do_IRFs_SP_baseline.m' generate the Figure 1: `IRFs_SP_Eco_1_2_taylor.png'
 
\end_layout

\begin_layout Itemize
`Do_IRFs_SP_unequal.m' generate the Figure 7: `IRFs_SP_uneq_Eco_1_2.png' 
\end_layout

\begin_layout Standard
.The output of the `Julia' file is also:
\end_layout

\begin_layout Enumerate
6 files: moments_eco1/2_baseline, 'moments_taylor', moments_eco1/2_refined
\end_layout

\begin_layout Standard
Those files will be used by the Julia file `Tables.ipynb' to display the
 tables for First- and second-order moments for key variables.
 
\end_layout

\begin_layout Subsection
The steady state computation
\end_layout

\begin_layout Standard
The steady state is computed thanks to nine `Julia` notebooks.
 Each of above files are commented and self-explained.
\end_layout

\begin_layout Itemize
`Main.ipynb': Solves the steady-state model and returns the truncated model
 (as `steady_state_dynare.mat` for `Dynare`, saved in the current folder);
\end_layout

\begin_layout Itemize
`Structures.ipynb`: Structures and parameter calibration from targets;
\end_layout

\begin_layout Itemize
`Utils.ipynb`: Contains some useful functions;
\end_layout

\begin_layout Itemize
`SolveAiyagari.ipynb`: Solves the Aiyagari model;
\end_layout

\begin_layout Itemize
`Projection.ipynb`: Computes the steady-state truncated model;
\end_layout

\begin_layout Itemize
`Projection_ref.ipynb`: Computes the steady-state redined truncated model;
\end_layout

\begin_layout Itemize
`Ramsey.ipynb`: Computes the steady-state Lagrange multipliers.
\end_layout

\begin_layout Itemize
`Simulation.ipynb': : Contains a function used to display tables of first
 and second order moments of key variables;
\end_layout

\begin_layout Itemize
`Tables.ipynb': Display tables of first and second order moments of key variables
;
\end_layout

\begin_layout Standard
Simulating the model with aggregate shocks, 
\end_layout

\begin_layout Itemize
The file `main.m` simulates the model for the first two economies of the
 paper.
 For the baseline truncation or the refined truncation depending on the
 line 3 and 4 of the file.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Economy 1: optimal inflation
\end_layout

\begin_layout Itemize
Economy 2: constant inflation
\end_layout

\end_deeper
\begin_layout Itemize
The file `main_taylor.m` simulates the model for third economy of the paper:
\end_layout

\begin_deeper
\begin_layout Itemize
Economy 3: Taylor Rule
\end_layout

\end_deeper
\begin_layout Standard
The outcomes of the program can be parametrized as follows:
\end_layout

\begin_layout Itemize
The `Octave' / `Matlab' actually writes different `Dynare' codes 
\end_layout

\begin_deeper
\begin_layout Itemize
`code_dynare_baseline1.mod', `code_dynare_baseline2.mod', `code_dynare_taylor.mod'
 which correspond to the three economies of the baseline specifiation.
 
\end_layout

\begin_layout Itemize
`code_dynare_refined1.mod', `code_dynare_refined2.mod'.
\end_layout

\begin_layout Itemize
`code_dynare_unequal1.mod', `code_dynare_unequal2.mod'
\end_layout

\end_deeper
\begin_layout Standard
Each of this code is then solved in `Dynare'.
 These files, as interim Dynare files are created in the current folder.
\end_layout

\begin_layout Subsection
Comparisons with the Reiter method
\end_layout

\begin_layout Subsubsection
How to run?
\end_layout

\begin_layout Standard
In this order:
\end_layout

\begin_layout Enumerate
Open `Reiter/steady_state/Main_Reiter_Comp.ipynb' and execute all cells.
\end_layout

\begin_layout Enumerate
Run `Reiter/dynamics/reiter_comp.m'.
 
\end_layout

\begin_layout Enumerate
Run `Reiter/dynamics/refined_comp.m'.
 
\end_layout

\begin_layout Enumerate
Run `Reiter/dynamics/code_difference.m' .
 
\end_layout

\begin_layout Standard
Output: 
\end_layout

\begin_layout Itemize
Figure 8: run `Reiter/dynamics/fig_Comp_Reiter_Trunc.m' 
\end_layout

\begin_layout Itemize
Table 11: run `Reiter/steady_state/Tables_Reiter_Comp.ipynb' cells 1 to 4
 
\end_layout

\begin_layout Itemize
Table 12 : run `Reiter/steady_state/Tables_Reiter_Comp.ipynb' cell 5
\end_layout

\begin_layout Subsubsection
The details
\end_layout

\begin_layout Standard
The output of the `Julia' files is: 
\end_layout

\begin_layout Itemize
a file `todynare_Comp_Reiter.mat'
\end_layout

\begin_layout Itemize
a file `todynare_Comp_Refined.mat'
\end_layout

\begin_layout Standard
Those files will be used by `reiter_comp.m, `refined_comp.m' 
\end_layout

\begin_layout Itemize
The outputs of the `Octave' / `Matlab' files are: 
\end_layout

\begin_deeper
\begin_layout Itemize
`todiff_Reiter IRFs.mat' save the IRFs of the Reiter simulation 
\end_layout

\begin_layout Itemize
`todiff_Comp_Refined.mat' save the IRFs of the refined truncation
\end_layout

\begin_layout Itemize
`moments_Comp_Reiter.mat' save the moments of the Reiter simulation 
\end_layout

\begin_layout Itemize
`moments_Comp_Refined.mat' save the moments of model with the refined truncation
 
\end_layout

\begin_layout Itemize
`to_code_difference_reiter.mat' save the result of the Reiter simulation
 
\end_layout

\begin_layout Itemize
`to_code_difference_refined.mat' save the result of the refined truncation
 simulation
\end_layout

\begin_layout Itemize
Then those files will be used by `code_difference.m' to generate `diff_Reiter.mat'
: save the result for table 12.
 
\end_layout

\end_deeper
\begin_layout Itemize
Finally: 
\end_layout

\begin_deeper
\begin_layout Itemize
`Reiter/steady_dynamics/fig_Comp_Reiter_Trunc.m' generates the Figure 8:
 `Comp_Reiter_Trunc.png' 
\end_layout

\begin_layout Itemize
`Reiter/steady_state/Tables_Reiter_Comp.m' displays Table 11 and 12.
 
\end_layout

\end_deeper
\begin_layout Section
Quantitative assessment of the sticky-wage model.
\end_layout

\begin_layout Subsection
How to run?
\end_layout

\begin_layout Standard
In this order:
\end_layout

\begin_layout Enumerate
Open `Sticky_Wages/steady_state/Main_SW.ipynb' and execute all cells.
 
\end_layout

\begin_layout Enumerate
Run `Sticky_Wages/dynamics/main_SW.m'.
 
\end_layout

\begin_layout Enumerate
Run `Sticky_Wages/dynamics/main_taylor_SW.m'.
\end_layout

\begin_layout Standard
Output 
\end_layout

\begin_layout Enumerate
Figure 3  : Run `Sticky_Wages/dynamics/Do_IRFs_SW_baseline.m' 
\end_layout

\begin_layout Subsection
The details
\end_layout

\begin_layout Itemize
The `Julia` files takes care of computing the steady state, while the .m
 file simulates the model in the presence of aggregate shocks.
\end_layout

\begin_deeper
\begin_layout Itemize
The output of the `Julia` file is a file `todynare_SW.mat' that will be used
 by `Octave` / `Matlab`.
 
\end_layout

\end_deeper
\begin_layout Itemize
The outputs of the .m are: 
\end_layout

\begin_deeper
\begin_layout Itemize
`To_IRFs_SW.mat' 
\end_layout

\begin_layout Itemize
`To_IRFs_SP_taylor.mat'
\end_layout

\end_deeper
\begin_layout Itemize
`Do_IRFs_SP_baseline.m' generate IRFs_SW_Eco_1_4_taylor.png 
\end_layout

\begin_layout Subsection
The steady state computation
\end_layout

\begin_layout Standard
The steady state is computed thanks to seven `Julia` notebooks.
 Each of above files are commented and self-explained.
\end_layout

\begin_layout Itemize
`Main.ipynb': Solves the steady-state model and returns the truncated model
 (as `steady_state_dynare.mat` for `Dynare`, saved in the current folder);
\end_layout

\begin_layout Itemize
`Structures.ipynb': Structures and parameter calibration from targets;
\end_layout

\begin_layout Itemize
`Utils.ipynb': Contains some useful functions;
\end_layout

\begin_layout Itemize
`SolveAiyagari.ipynb': Solves the Aiyagari model;
\end_layout

\begin_layout Itemize
`Projection.ipynb': Computes the steady-state truncated model;
\end_layout

\begin_layout Itemize
`Ramsey_SP.ipynb': Computes the steady-state Lagrange multipliers.
\end_layout

\begin_layout Itemize
`ToDynare_SW': Generate the output of the Julia file: `todynare_SW.mat' that
 will be used by `Octave` / `Matlab`.
 
\end_layout

\begin_layout Standard
Simulating the model with aggregate shocks, 
\end_layout

\begin_layout Itemize
The file `main_SW.m` simulates the model for the first two economies of the
 section:
\end_layout

\begin_deeper
\begin_layout Itemize
Economy 1: optimal inflation
\end_layout

\begin_layout Itemize
Economy 2: constant wage inflation
\end_layout

\end_deeper
\begin_layout Itemize
The file `main_SW_taylor.m` simulates the model for third economy of the
 paper:
\end_layout

\begin_deeper
\begin_layout Itemize
Economy 3: Taylor Rule
\end_layout

\end_deeper
\begin_layout Standard
The outcomes of the program can be parametrized as follows:
\end_layout

\begin_layout Itemize
The `Octave` / `Matlab` actually writes three `Dynare' codes `code_dynare_SW1.mod
', `code_dynare_SW4.mod', `code_dynare_SW_taylor.mod' which correspond to
 the three economies.
 Each of this code is then solved in `Dynare'.
 These files, as interim Dynare files are created in the current folder.
\end_layout

\end_body
\end_document
